#!/usr/bin/python
import sys
import os
import time
import shelve
import master_config_parse

def write_C_control_struct(url):
    db = master_config_parse.load_json_over_http(url)

    C_STRUCT_LIST = {'hkpointing': 'CTRL_SYS_POINTING', \
                     'hkdevicenet': 'CTRL_SYS_KUKA_DN', \
                     'hkbbc': 'CTRL_SYS_BBC', \
                     'hkabob': 'CTRL_SYS_ABOB', \
                     'hkvar': 'CTRL_SYS_INT_VARIABLE', \
                     'hksnyc': 'CTRL_SYS_SNYC'}

    structfile_c = open('control_struct.c', 'w')
    structfile_h = open('control_struct.h', 'w')
    structfile_h.write('#ifndef CONTROL_STRUCT_H\n')
    structfile_h.write('#define CONTROL_STRUCT_H\n\n')
    structfile_c.write('// Control database generated by make_controls python ' + \
                       'script.\n')
    structfile_c.write('// Version ' + repr(db['version']['version']) + '\n')
    structfile_c.write('\n')
    structfile_c.write('// WARNING:    Do not edit this file!  It must be ' + \
                       'generated by the python script!\n')
    structfile_c.write('\n')
    structfile_c.write('#include \"control.h\"\n')
    structfile_c.write('\n')
    structfile_c.write('const char control_version[] = \"' + \
                       db['version']['version'] + '\";\n')
    structfile_c.write('\n')
    structfile_h.write('extern const char control_version[];\n')
    structfile_h.write('\n')
    structfile_h.write('enum ctrl_sys_type_t {\n')

    for key in C_STRUCT_LIST:
        structfile_h.write('  ' + C_STRUCT_LIST[key] + ',\n')

    structfile_h.write('  CTRL_SYS_END_OF_ENUM\n')
    structfile_h.write('};\n')
    structfile_h.write('\n')
    structfile_c.write('struct ctrl_cmd_param_t ctrl_cmd_param[] = {\n')

    for key in db.keys():
        rec = db[key]
        if rec.has_key('system') and rec['destination'] in C_STRUCT_LIST:
            structfile_c.write('  {\"' + rec['short_name'] +'\", ' \
                                + '\"' + rec['type'] +'\", ' \
                                + '\"' + rec['destination'] + '\", ' \
                                + '\"' + rec['units'] + '\", ' \
                                + repr(rec['minmax'][0]) + ', ' \
                                + repr(rec['minmax'][1]) + ', ' \
                                + repr(rec['default_val']) + ', ' \
                                + repr(rec['hwid']) + '},\n')

    structfile_c.write('\n')
    structfile_c.write('  END_OF_CTRL_CMD_PARAM\n')
    structfile_c.write('};\n')
    structfile_c.write('\n')
    structfile_c.write('char ctrl_sys[][16] = {\n')

    for key in C_STRUCT_LIST:
        structfile_c.write('  \"' + key + '\",\n')

    structfile_c.write('\n')
    structfile_c.write('  END_OF_CTRL_SYS\n')
    structfile_c.write('};\n')
    structfile_c.write('\n')
    structfile_h.write('enum map_multi_t {\n')

    for key in db.keys():
        if db[key].has_key('pulldown_name'):
            for pdkey in db[key].keys():
                if not pdkey == 'pulldown_name':
                    rec = db[key][pdkey]
                    structfile_h.write('  ' + rec['var'] + '_multi = ' + pdkey + ',\n')

    structfile_h.write('  map_multi_end_of_enum\n')
    structfile_h.write('};\n')
    structfile_h.write('\n')
    structfile_h.write('enum ctrl_cmd_param_idx_t {\n')

    for key in db.keys():
        rec = db[key]
        if rec.has_key('system') and rec['destination'] in C_STRUCT_LIST:
            structfile_h.write('  ' + rec['short_name'] + '_idx,\n')

    structfile_h.write('  ctrl_sys_param_idx_end_of_enum\n')
    structfile_h.write('};\n')
    structfile_c.close()
    structfile_h.write('\n#endif\n')
    structfile_h.close()


if __name__ == "__main__":
    url = "http://www.cita.utoronto.ca/~eswitzer/master.json"
    write_C_control_struct(url)
