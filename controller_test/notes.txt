uthash <-> Redis <-- 0MQ ssh --> python GUI or mongrel2

two different types to response: "command", or "variable"

device handler model:
thread listens for published commands: blocking
when new variable is received, call one-off function to get the value and write it to the uthash
flag push_to_device high
device threads running asynchronously; check if

sender model:
set the variable and publish the variable name to the housekeeping channel

alternate: could publish both the variable name and its new value
alternate: each device channel is a publish channel

tx: publish string with variable name and value
rx: blocking thread sets requested_value field
  --if it is equal to the present working_value, ignore
device: thread checks for new values
  --if just a variable: value=requested_value
  --if a "command" push the variable to the device and set the working value
  --in both cases

most like present scheme:
tx: publish string with variable name and value
rx: put these in a buffer, process in the commanding thread

replace cmd_ctrl with a hash table
commanding is similar

basic picture:
redis takes the place of the shelve and interface->amcp connection
uthash takes the place of cmd_ctrl
tcp connection to interface server is replaced by zero_mq over ssh

advantages of this picture:
redis knows all about the amcp state
commands are passed as simple string; value pair
interface server becomes a simple chat room
do we need interface server at all? yes:

step 1:
strip amcp down to just commanding architecture
interface server calls->redis
ctrl_cmd->uthash

on start-up:
system call to python which grabs and parses the control struct

command number -> command index => command name -> command index

the way the dict is read:
key = arbitrary number; name, etc.

working_value
requested_value

nice things to add:
thread that subscribes to msg and write message strings in the amcp log (descriptive)

replace all instances of the cmdnum with a function that goes from string name to index
use internal command numbers

TODO:
securing redis connections

remake makefile:
  python: grab .json from main website
  python: JSON -> control_struct.c/.h as before
  build the code as before

write redis interface to replace act_util: interfacer server

JSON to master shelve for GUI
write redis interface


interface server supports zeromq ssh connections instead of tcp
shelve db in server is replaced with redis

apt-get redis, libevent-dev
make and make install hiredis
sudo ldconfig -v -n /usr/local/lib
compile with -levent and -lhiredis at the end
