import sys
import os
import shelve
import time
from param import MASTER_SHELVE
## 
# \namespace make_controls_penn
# Define the command structures (UPenn)

#os.remove(MASTER_SHELVE)
db = shelve.open(MASTER_SHELVE, "c")

db['version'] = {"version":"123456789"}
hwidnum = 0
db['rel_4he1_char'] = {'system':'housekeeping', \
                       'category':'Heaters', \
                       'destination':'hkbbc', \
                       'short_name':'rel_4he1_char', \
                       'desc':'4He Pulse Tube 1 Charcoal', \
                       'minmax':[0,1], \
                       'confirm':0, \
                       'hwid':hwidnum, \
                       'type':'input_onoff', \
                       'displayorder':1, \
                       'default_val':0 }
hwidnum = hwidnum + 1
db['rel_4he2_char'] = {'system':'housekeeping', \
                       'category':'Heaters', \
                       'destination':'hkbbc', \
                       'short_name':'rel_4he2_char', \
                       'desc':'4He Pulse Tube 2 Charcoal', \
                       'minmax':[0,1], \
                       'confirm':0, \
                       'hwid':hwidnum, \
                       'type':'input_onoff', \
                       'displayorder':2, \
                       'default_val':0 }
hwidnum = hwidnum + 1
db['rel_3he2_char'] = {'system':'housekeeping', \
                       'category':'Heaters', \
                       'destination':'hkbbc', \
                       'short_name':'rel_3he2_char', \
                       'desc':'3He Pulse Tube 2 Charcoal', \
                       'minmax':[0,1], \
                       'confirm':0, \
                       'hwid':hwidnum, \
                       'type':'input_onoff', \
                       'displayorder':3, \
                       'default_val':0 }
hwidnum = hwidnum + 1
db['rel_4he1_hs'] = {'system':'housekeeping', \
                     'category':'Heaters', \
                     'destination':'hkbbc', \
                     'short_name':'rel_4he1_hs', \
                     'desc':'4He Pulse Tube 1 Heat Switch', \
                     'minmax':[0,1], \
                     'confirm':0, \
                     'hwid':hwidnum, \
                     'type':'input_onoff', \
                     'displayorder':4, \
                     'default_val':0 }
hwidnum = hwidnum + 1
db['rel_4he2_hs'] = {'system':'housekeeping', \
                     'category':'Heaters', \
                     'destination':'hkbbc', \
                     'short_name':'rel_4he2_hs', \
                     'desc':'4He Pulse Tube 2 Heat Switch', \
                     'minmax':[0,1], \
                     'confirm':0, \
                     'hwid':hwidnum, \
                     'type':'input_onoff', \
                     'displayorder':5, \
                     'default_val':0 }
hwidnum = hwidnum + 1
db['rel_3he1_hs'] = {'system':'housekeeping', \
                     'category':'Heaters', \
                     'destination':'hkbbc', \
                     'short_name':'rel_3he1_hs', \
                     'desc':'3He Pulse Tube 2 Heat Switch', \
                     'minmax':[0,1], \
                     'confirm':0, \
                     'hwid':hwidnum, \
                     'type':'input_onoff', \
                     'displayorder':6, \
                     'default_val':0 }
hwidnum = hwidnum + 1


db.close()

#-------------------------------------------------------------------------------
# Write out the housekeeping lookup table/structs.
#-------------------------------------------------------------------------------

# Sort on the hardware ID.
def compare_cmdorder(x,y):
  return x['hwid']-y['hwid']
db = shelve.open(MASTER_SHELVE, "r")

#---------------------------------------------------------------------
# Write the AMCP struct file.
#---------------------------------------------------------------------

AMCPLIST = ['hkpointing', 'hkbbc', 'hkvar']
structfile = open('control_struct.c', 'w')
structfile.write('// Control database generated by make_controls python ' + \
                 'script.\n')
structfile.write('// Version ' + repr(db['version']) + '\n')
structfile.write('\n')
structfile.write('// WARNING:  Do not edit this file!  It must be ' + \
                 'generated by the python script!\n')
structfile.write('\n')
structfile.write('#include \"control.h\"\n')
structfile.write('\n')
structfile.write('struct ctrl_cmd_param_t ctrl_cmd_param[] = {\n')
for key in db.keys():
  rec = db[key]
  if not key == 'version' and rec['destination'] in AMCPLIST:
    structfile.write('  {\"'+rec['short_name']  +'\", ' \
                     +'\"'+rec['desc']        +'\", ' \
                     +'\"'+rec['destination']+'\", ' \
                          +repr(rec['default_val'])+', ' \
                          +repr(rec['hwid'])+'},\n')    
structfile.write('\n')
structfile.write('  END_OF_CTRL_CMD_PARAM\n')
structfile.write('};\n')
structfile.write('\n')
structfile.write('char ctrl_sys[][16] = {\n')
for key in AMCPLIST:
  structfile.write('  \"' + key + '\",\n')
structfile.write('\n')
structfile.write('  END_OF_CTRL_SYS\n')
structfile.write('};\n')
structfile.close()
db.close()

#---------------------------------------------------------------------
# Utilities to print available commands in the structure
#---------------------------------------------------------------------
def input_onoff_name(): 
  return 'on/off toggle'

def input_select_name(): 
  return 'radio button select'

def input_pulldown_name(): 
  return 'pulldown menu'

def slider_float_name(): 
  return 'send float (slider interface)'

def input_float_name(): 
  return 'send float (number entry bar)'

def input_timer_name():
  return 'send timer value'

def input_sendstring_name(): 
  return 'send string'

type_switch = {
  "input_onoff": input_onoff_name,
  "input_select": input_select_name,
  "input_pulldown": input_pulldown_name,
  "input_float": input_float_name,
  "slider_float": slider_float_name,
  "input_timer": input_timer_name,
  "input_sendstring": input_sendstring_name}
  
def print_yesno(yn_str):
  if yn_str==0: 
    return 'no'
  else:
    return 'yes'
 
def print_record(rec):
  print 'system: ', repr(rec['system'])
  print 'category: ', repr(rec['category'])
  print 'short name: ', repr(rec['short_name'])
  print 'description: ', repr(rec['desc'])
  print 'minimum/maximum: ', repr(rec['minmax'])
  print 'require confirmation?: ', print_yesno(rec['confirm'])
  print 'hardware command identifier: ', repr(rec['hwid'])
  print 'command type: ', type_switch.get(rec['type'])()
  print 'display order within category: ', repr(rec['displayorder'])
  print 'default value: ', repr(rec['default_val'])

db = shelve.open(MASTER_SHELVE, "r")
for key in db.keys():
  if not key == 'version':
    print '-------------------------------------------'
    print 'command short name:', repr(key)
    print_record(db[key])

db.close()

